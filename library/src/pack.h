/* Copyright (c) 2013 William Orr <will@worrbase.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/** @file
 * @brief Packing and unpacking wsh_cmd_req_t and wsh_cmd_res_t
 */
#ifndef __WSH_PACK_H
#define __WSH_PACK_H

#include <glib.h>

#include "cmd.h"

/**
 * @brief Packs a wsh_cmd_req_t into a byte string to send over the wire
 *
 * @param[out] buf The generated byte string
 * @param[out] buf_len Length of the buffer
 * @param[in] req The request to pack into the byte string
 *
 * @note buf should be freed with g_slice_free1
 */
__attribute__((nonnull))
void wsh_pack_request(guint8** buf, guint32* buf_len, const wsh_cmd_req_t* req);

/**
 * @brief Unpacks a byte string into a wsh_cmd_req_t
 *
 * @param[out] req Command request to unpack into. Must be freed with wsh_free_unpacked_request
 * @param[out] buf The buffer to unpack
 * @param[in] buf_len The length of the buffer to unpack
 */
__attribute__((nonnull))
void wsh_unpack_request(wsh_cmd_req_t** req, const guint8* buf,
                        guint32 buf_len);

/**
 * @brief Frees a wsh_cmd_req_t generated by wsh_unpack_request
 *
 * @param[in] req The wsh_cmd_req_t to free
 */
void wsh_free_unpacked_request(wsh_cmd_req_t** req);

/**
 * @brief Packs a wsh_cmd_res_t into a byte string to send over the wire
 *
 * @param[out] buf The generated byte string
 * @param[out] buf_len The length of the generated byte string
 * @param[in] res The wsh_cmd_res_t to pack into the byte string
 *
 * @note buf should be freed with g_slice_free1
 */
__attribute__((nonnull))
void wsh_pack_response(guint8** buf, guint32* buf_len,
                       const wsh_cmd_res_t* res);

/**
 * @brief Unpacks a byte string into a wsh_cmd_res_t
 *
 * @param[out] res The generated wsh_cmd_res_t. Must be freed with wsh_free_unpacked_response
 * @param[in] buf The buffer to unpack
 * @param[in] buf_len The length of the buffer that's getting unpacked
 */
__attribute__((nonnull))
void wsh_unpack_response(wsh_cmd_res_t** res, const guint8* buf,
                         guint32 buf_len);

/**
 * @brief Free an unpacked wsh_cmd_res_t
 *
 * @param[in] res The wsh_cmd_res_t to free
 */
void wsh_free_unpacked_response(wsh_cmd_res_t** res);

#endif

